package org.metadatacenter.cadsr.ingestor.form;

import com.google.common.collect.Maps;
import org.metadatacenter.cadsr.cde.schema.DataElement;
import org.metadatacenter.cadsr.form.schema.Form;

import org.metadatacenter.cadsr.ingestor.exception.UnknownSeparatorException;
import org.metadatacenter.cadsr.ingestor.exception.UnsupportedDataElementException;
import org.metadatacenter.cadsr.ingestor.util.CdeUtil;
import org.metadatacenter.cadsr.ingestor.util.Constants;
import org.metadatacenter.model.ModelNodeNames;
import org.metadatacenter.model.ModelNodeValues;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.metadatacenter.cadsr.ingestor.util.Constants.TEMPLATE_TYPE;

public class FormParser {

  private static final Logger logger = LoggerFactory.getLogger(FormParser.class);

  public static void parseForm(Form form, final Map<String, Object> templateMap) {

      createEmptyTemplate(templateMap);
//      setFieldIdentifier(fieldMap, dataElement.getPUBLICID().getContent());
//      setFieldName(fieldMap, dataElement.getLONGNAME().getContent(), dataElement.getPUBLICID().getContent());
//      setFieldDescription(fieldMap, dataElement.getPREFERREDDEFINITION().getContent());
//      setFieldQuestions(fieldMap, dataElement, new UserQuestionsHandler());
//      setInputType(fieldMap, dataElement, new InputTypeHandler());
//       setVersion(templateMap, form, new VersionHandler());
//      setValueConstraints(fieldMap, dataElement, new ValueConstraintsHandler());
//      setUI(fieldMap, dataElement, new UIHandler());
//      setProperties(fieldMap, dataElement, new PropertiesHandler());
//      setPermissibleValues(fieldMap, dataElement, new PermissibleValuesHandler());
//      setCategories(fieldMap, dataElement, new CategoriesHandler());
    }

//  private static void setFieldIdentifier(final Map<String, Object> fieldMap, String content) {
//    fieldMap.put(ModelNodeNames.SCHEMA_ORG_IDENTIFIER, content);
//  }
//
//  private static void setFieldName(final Map<String, Object> fieldMap, String nameContent, String idContent) {
//    fieldMap.put(ModelNodeNames.SCHEMA_ORG_NAME, asJsonSchemaName(nameContent, idContent));
//    fieldMap.put(ModelNodeNames.JSON_SCHEMA_TITLE, asJsonSchemaTitle(nameContent));
//    fieldMap.put(ModelNodeNames.JSON_SCHEMA_DESCRIPTION, asJsonSchemaDescription(nameContent));
//  }
//
//  private static Object asJsonSchemaName(String nameContent, String idContent) {
//    return String.format("%s (%s)", nameContent, idContent);
//  }
//
//  private static Object asJsonSchemaTitle(String content) {
//    return String.format("The '%s' field schema", content);
//  }
//
//  private static Object asJsonSchemaDescription(String content) {
//    return String.format("The '%s' field schema auto-generated by the CEDAR/CDE Tool", content);
//  }
//
//  private static void setFieldDescription(final Map<String, Object> fieldMap, String content) {
//    fieldMap.put(ModelNodeNames.SCHEMA_ORG_DESCRIPTION, content);
//  }
//
//  private static void setFieldQuestions(final Map<String, Object> fieldMap, DataElement dataElement,
//                                        UserQuestionsHandler
//                                            userQuestionsHandler) throws UnsupportedDataElementException {
//    userQuestionsHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setInputType(final Map<String, Object> fieldMap, DataElement dataElement, InputTypeHandler
//      inputTypeHandler) throws UnsupportedDataElementException {
//    inputTypeHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setProperties(Map<String, Object> fieldMap, DataElement dataElement, PropertiesHandler
//      propertiesHandler) throws UnsupportedDataElementException {
//    propertiesHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setPermissibleValues(Map<String, Object> fieldMap, DataElement dataElement,
//                                           PermissibleValuesHandler
//                                               permissibleValuesHandler) throws UnsupportedDataElementException,
//      UnknownSeparatorException {
//    permissibleValuesHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setValueConstraints(Map<String, Object> fieldMap, DataElement dataElement, ValueConstraintsHandler
//      valueConstraintsHandler) throws UnsupportedDataElementException {
//    valueConstraintsHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setUI(Map<String, Object> fieldMap, DataElement dataElement, UIHandler uiHandler) throws UnsupportedDataElementException {
//    uiHandler.handle(dataElement).apply(fieldMap);
//  }
//
//  private static void setVersion(Map<String, Object> templateMap, Form form, VersionHandler
//      versionHandler) throws UnsupportedDataElementException {
//    versionHandler.handle(form).apply(templateMap);
//  }

  private static void createEmptyTemplate(final Map<String, Object> templateMap) {
    templateMap.put(ModelNodeNames.JSON_SCHEMA_SCHEMA, ModelNodeValues.JSON_SCHEMA_IRI);
    templateMap.put(ModelNodeNames.JSON_LD_ID, null);
    templateMap.put(ModelNodeNames.JSON_LD_TYPE, TEMPLATE_TYPE);
    templateMap.put(ModelNodeNames.JSON_LD_CONTEXT, setDefaultContext());
    templateMap.put(ModelNodeNames.JSON_SCHEMA_TYPE, ModelNodeValues.OBJECT);
    templateMap.put(ModelNodeNames.JSON_SCHEMA_TITLE, "");
    templateMap.put(ModelNodeNames.JSON_SCHEMA_DESCRIPTION, "");
    templateMap.put(ModelNodeNames.UI, setDefaultUi());

    templateMap.put(ModelNodeNames.JSON_SCHEMA_PROPERTIES, setDefaultProperties()); // TODO

    templateMap.put(ModelNodeNames.SCHEMA_ORG_NAME, "");
    templateMap.put(ModelNodeNames.SCHEMA_ORG_DESCRIPTION, "");

    templateMap.put(ModelNodeNames.PAV_CREATED_ON, null);
    templateMap.put(ModelNodeNames.PAV_CREATED_BY, null);
    templateMap.put(ModelNodeNames.PAV_LAST_UPDATED_ON, null);
    templateMap.put(ModelNodeNames.OSLC_MODIFIED_BY, null);
    templateMap.put(ModelNodeNames.SCHEMA_ORG_SCHEMA_VERSION, Constants.CEDAR_SCHEMA_VERSION);
    templateMap.put(ModelNodeNames.JSON_SCHEMA_ADDITIONAL_PROPERTIES, ModelNodeValues.FALSE);

  }

  private static Map<String, Object> setDefaultContext() {
    Map<String, Object> context = Maps.newHashMap();
    context.put(ModelNodeNames.XSD, ModelNodeValues.XSD_IRI);
    context.put(ModelNodeNames.PAV, ModelNodeValues.PAV_IRI);
    context.put(ModelNodeNames.OSLC, ModelNodeValues.OSLC_IRI);
    context.put(ModelNodeNames.SCHEMA, ModelNodeValues.SCHEMA_IRI);
    context.put(ModelNodeNames.BIBO, ModelNodeValues.BIBO_IRI);
    context.put(ModelNodeNames.SCHEMA_ORG_NAME, setAtTypeString());
    context.put(ModelNodeNames.SCHEMA_ORG_DESCRIPTION, setAtTypeString());
    context.put(ModelNodeNames.PAV_CREATED_ON, setAtTypeDateTime());
    context.put(ModelNodeNames.PAV_CREATED_BY, setAtTypeId());
    context.put(ModelNodeNames.PAV_LAST_UPDATED_ON, setAtTypeDateTime());
    context.put(ModelNodeNames.OSLC_MODIFIED_BY, setAtTypeId());
    return context;
  }

  private static Map<String, Object> setAtTypeId() {
    Map<String, Object> typeId = Maps.newHashMap();
    typeId.put(ModelNodeNames.JSON_LD_TYPE, ModelNodeValues.LD_ID);
    return typeId;
  }

  private static Map<String, Object> setAtTypeString() {
    Map<String, Object> typeString = Maps.newHashMap();
    typeString.put(ModelNodeNames.JSON_LD_TYPE, ModelNodeValues.XSD_STRING);
    return typeString;
  }

  private static Map<String, Object> setAtTypeDateTime() {
    Map<String, Object> typeDateTime = Maps.newHashMap();
    typeDateTime.put(ModelNodeNames.JSON_LD_TYPE, ModelNodeValues.XSD_DATETIME);
    return typeDateTime;
  }

  private static Object setDefaultUi() {
    Map<String, Object> ui = Maps.newHashMap();
    ui.put(ModelNodeNames.UI_PAGES, new ArrayList());
    ui.put(ModelNodeNames.UI_ORDER, new ArrayList());
    ui.put(ModelNodeNames.UI_PROPERTY_LABELS, Maps.newHashMap());
    ui.put(ModelNodeNames.UI_PROPERTY_DESCRIPTIONS, Maps.newHashMap());
    return ui;
  }

  private static Object setDefaultProperties() {
    Map<String, Object> properties = Maps.newHashMap();

    Map<String, Object> ldIdProperty = Maps.newHashMap();
    Map<String, Object> ldTypeProperty = Maps.newHashMap();
    Map<String, Object> isBasedOnProperty = Maps.newHashMap();
    Map<String, Object> nameProperty = Maps.newHashMap();
    Map<String, Object> descriptionProperty = Maps.newHashMap();
    Map<String, Object> derivedFromProperty = Maps.newHashMap();
    Map<String, Object> createdOnProperty = Maps.newHashMap();
    Map<String, Object> createdByProperty = Maps.newHashMap();
    Map<String, Object> lastUpdatedOnProperty = Maps.newHashMap();
    Map<String, Object> modifiedByProperty = Maps.newHashMap();

    properties.put(ModelNodeNames.JSON_LD_CONTEXT, setDefaultContextProperty());
    properties.put(ModelNodeNames.JSON_LD_ID, ldIdProperty);
    properties.put(ModelNodeNames.JSON_LD_TYPE, ldTypeProperty);
    properties.put(ModelNodeNames.SCHEMA_IS_BASED_ON, isBasedOnProperty);
    properties.put(ModelNodeNames.SCHEMA_ORG_NAME, nameProperty);
    properties.put(ModelNodeNames.JSON_SCHEMA_DESCRIPTION, descriptionProperty);
    properties.put(ModelNodeNames.PAV_DERIVED_FROM, derivedFromProperty);
    properties.put(ModelNodeNames.PAV_CREATED_ON, createdOnProperty);
    properties.put(ModelNodeNames.PAV_CREATED_BY, createdByProperty);
    properties.put(ModelNodeNames.PAV_LAST_UPDATED_ON, lastUpdatedOnProperty);
    properties.put(ModelNodeNames.OSLC_MODIFIED_BY, modifiedByProperty);

    return properties;
  }

  private static Object setDefaultContextProperty() {
    Map<String, Object> contextProperty = Maps.newHashMap();
    contextProperty.put(ModelNodeNames.JSON_SCHEMA_TYPE, ModelNodeValues.OBJECT);
//    contextProperty.put(ModelNodeNames.XSD, ModelNodeValues.XSD_IRI);
//    contextProperty.put(ModelNodeNames.PAV, ModelNodeValues.PAV_IRI);
//    contextProperty.put(ModelNodeNames.OSLC, ModelNodeValues.OSLC_IRI);
//    contextProperty.put(ModelNodeNames.SCHEMA, ModelNodeValues.SCHEMA_IRI);
//    contextProperty.put(ModelNodeNames.BIBO, ModelNodeValues.BIBO_IRI);
//    contextProperty.put(ModelNodeNames.SCHEMA_ORG_NAME, setAtTypeString());
//    contextProperty.put(ModelNodeNames.SCHEMA_ORG_DESCRIPTION, setAtTypeString());
//    contextProperty.put(ModelNodeNames.PAV_CREATED_ON, setAtTypeDateTime());
//    contextProperty.put(ModelNodeNames.PAV_CREATED_BY, setAtTypeId());
//    contextProperty.put(ModelNodeNames.PAV_LAST_UPDATED_ON, setAtTypeDateTime());
//    contextProperty.put(ModelNodeNames.OSLC_MODIFIED_BY, setAtTypeId());
    return contextProperty;
  }





}
